<%
    core.util.string();

    assert( Wiki );

    var uri = request.getURI();

    // This should be moved to a general handler for all modules
    if( request.getURI().indexOf('~') >= 0 ) {
        // only allowed if we remapped the url.  otherwise security would be bypassed
        print("module error 2");
        return;
    }

    var base = uri.match( /^.*?wiki\// );

    /* if user hits .../wiki, redirect to .../wiki/ */
    if( !base && request.getURI().match(/wiki/) ) {
        response.setResponseCode( 302 );
        response.setHeader( "Location" , uri.match(/^.*wiki/) + '/' );
        return;
    }

    if ( ! request.name )
	request.applyServletParams( /wiki\/([^\/]+)/ , [ "name" ] );

    // Get the name of the page we are supposed to display. Assume we want the Main page if no page name is provided
    var displayName = request.name;
    if (!displayName) displayName = "Main";

    // Construct the full name of the page if we have a prefix defined for this instance
    var name = displayName;

    if ( Wiki.config.prefix && ! displayName.match( "^" + Wiki.config.prefix ) )
        name = Wiki.config.prefix + displayName;

    // Get the actual wiki page. If there is no page with the given name, create a new page
    var wikiPage = db.wiki.findOne( { name : name } );

/* check case */
if( !wikiPage && name && name.length ) {
    var w = db.wiki.findOne( { name: RegExp("^" + name + "$", "i") } );
    if( w ) {
	var nm = w.name;
	if( Wiki.config.prefix ) {
	    nm = nm.lessPrefix(Wiki.config.prefix);
	}
        response.setResponseCode( 302 );
        response.setHeader( "Location" , base + nm );
        return;
    }
}

    if (!wikiPage) wikiPage = new Wiki.WikiPage(name);

if( request.pdf ) {
    core.modules.wiki.pdf();
    return;
}

    // Check to see if we have been asked for an historical version of this wiki page
    var wikiPageHistoricalVersion;
    if (request.version) {
        wikiPageHistoricalVersion = wikiPage.getWikiPageHistory(request.version);
        if(! wikiPageHistoricalVersion){
            log.Wiki.error("Got a request for historical version " + request.version + " but was unable to find it in the database.");
        }
        if (request.diff == "true") {
            wikiPageShowDiff = true;
        }
    }

if ( ! Wiki.config.readOnly && (request['action'] && request['action'] != "Cancel")){
        var theFile = request.getFile( "theFile" );
        if (request['rename'] ) {
            Wiki.WikiController.renamePage(wikiPage, request.newName);
        }
        else if ( request['delete']  ) {
            Wiki.WikiController.deletePage(wikiPage);
        }
        else if (request['update'] ) {
            log(tojson(request));
            wikiPage.setText(request.wikitext.replace(/\r?\n/g, "\n"));
        }
        else if (theFile) {
            db._files.save( theFile );
            wikiPage.files.push(theFile._id);
            // Note: doesn't create a new historical version.. should it?
            db.wiki.save(wikiPage);
        }
    }

    if ( request.edit )
            core.modules.wiki.pieces.edit();
    else if ( request.history )
            core.modules.wiki.pieces.history();
    else if ( request.compare )
        core.modules.wiki.pieces.compare();
    else
        core.modules.wiki.pieces.view();
%>
